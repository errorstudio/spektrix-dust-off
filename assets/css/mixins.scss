
/* Mixins */


@mixin mq($point) {
  @if $point==wide {
    @media (min-width: 1200px) {
      @content;
    }
  }
  @else if $point==large {
    @media (max-width: 1199px) and (min-width: 992px) {
      @content;
    }
  }
  @else if $point==medium {
    @media (max-width: 991px) and (min-width: 768px) {
      @content;
    }
  }
  @else if $point==smartphone {
    @media (max-width: 767px) {
      @content;
    }
  }

}

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

.clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin kellum() {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  behavior: url('/PIE.htc');
  position: relative;
}

@mixin transform($string){
  -webkit-transform: $string;
  -moz-transform:    $string;
  -ms-transform:     $string;
  -o-transform:      $string;
  transform:      $string;
}

@mixin scale ($factor) {
  -webkit-transform: scale($factor);
  -moz-transform:    scale($factor);
  -ms-transform:     scale($factor);
  -o-transform:      scale($factor);
  transform:      scale($factor);
}

@mixin transition($arguments...) {
  -webkit-transition: $arguments;
  -moz-transition: $arguments;
  -o-transition: $arguments;
  transition: $arguments;
}

@mixin transition-delay($delay...) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}

@mixin translate ($x, $y:0) {
  -webkit-transform:       translate($x, $y);
  -moz-transform:    translate($x, $y);
  -ms-transform:     translate($x, $y);
  -o-transform:      translate($x, $y);
  transform:      translate($x, $y);
}

@mixin box-shadow ($string) {
  -webkit-box-shadow: $string;
  -moz-box-shadow:    $string;
  box-shadow:         $string;
}